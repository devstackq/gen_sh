package main

import (
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/devstackq/gen_sh/internal/content"
	"github.com/devstackq/gen_sh/internal/database"
	"github.com/devstackq/gen_sh/internal/monitoring"
	"github.com/devstackq/gen_sh/internal/speech"
	"github.com/devstackq/gen_sh/internal/textprocessing"
	"github.com/devstackq/gen_sh/internal/video"
	"github.com/devstackq/gen_sh/pkg/logger"
)

func main() {
	logger.InitLogger()
	defer logger.Log.Sync()

	if err := database.InitDB(); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}

	monitoring.InitMonitoring()
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –≤–∏–¥–µ–æ...")

	text, err := content.FetchNews()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %v", err)
	}

	var wg sync.WaitGroup

	wg.Add(1)
	var processedText string
	go func() {
		defer wg.Done()
		processedText = textprocessing.ProcessText(text)
	}()

	wg.Add(1)
	var audioPath string
	go func() {
		defer wg.Done()
		var err error
		audioPath, err = speech.GenerateAudio(processedText)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: %v", err)
		}
	}()

	wg.Wait()

	videoPath, err := video.CreateVideo(processedText, audioPath)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∏–¥–µ–æ: %v", err)
	}

	fmt.Printf("‚úÖ –í–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–æ: %s\n", videoPath)

	_, err = database.DB.Exec("INSERT INTO videos (title, path, created_at) VALUES ($1, $2, $3)",
		processedText, videoPath, time.Now())
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ –≤ –ë–î: %v", err)
	}

	monitoring.VideosGenerated.Inc()
	logger.Log.Info("üé¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
}
