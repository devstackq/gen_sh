package cron

import (
	"fmt"
	"log"
	"sync"

	"github.com/devstackq/gen_sh/internal/config"
	"github.com/devstackq/gen_sh/internal/upload"
	"github.com/devstackq/gen_sh/internal/video"
	"github.com/robfig/cron/v3"
)

// StartCronJob –∑–∞–ø—É—Å–∫–∞–µ—Ç cron –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
func StartCronJob(cfg *config.Config) {
	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ cron —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
	c := cron.New(cron.WithSeconds())

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1 —á–∞—Å –Ω–æ—á–∏
	_, err := c.AddFunc("0 1 * * *", func() {
		fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ...")

		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var wg sync.WaitGroup
		for _, user := range cfg.Users {
			wg.Add(1)
			go func(user config.User) {
				defer wg.Done()
				err := video.GenerateAndPublishForUser(user)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.Email, err)
				}
			}(user)
		}

		wg.Wait()
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2 —á–∞—Å–∞ –Ω–æ—á–∏
	_, err = c.AddFunc("0 2 * * *", func() {
		fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ...")

		// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		var wg sync.WaitGroup
		for _, user := range cfg.Users {
			wg.Add(1)
			go func(user config.User) {
				defer wg.Done()
				err := video.GenerateAndPublishForUser(user)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s: %v", user.Email, err)
				}
			}(user)
		}

		wg.Wait()
	})

	// –ó–∞–ø—É—Å–∫ cron –∑–∞–¥–∞—á
	c.Start()

	// –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
	select {}
}
