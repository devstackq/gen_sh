package cron

import (
	"fmt"
	"log"

	"github.com/devstackq/gen_sh/internal/database"
	"github.com/devstackq/gen_sh/internal/upload"
	"github.com/devstackq/gen_sh/internal/video/service"
	"github.com/devstackq/gen_sh/pkg/logger"
	"github.com/robfig/cron/v3"
)

// StartCronJob –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–¥–∞—á–∏ cron –¥–ª—è –ø–æ–∏—Å–∫–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
func StartCronJob() {
	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ cron —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
	c := cron.New(cron.WithSeconds())

	// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 1 —á–∞—Å –Ω–æ—á–∏ (–ø—Ä–∏–º–µ—Ä)
	_, err := c.AddFunc("0 1 * * *", func() {
		fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ...")
		// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
		if err := GenerateVideos(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ cron: %v", err)
		}
	})

	// –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 2 —á–∞—Å–∞ –Ω–æ—á–∏ (–ø—Ä–∏–º–µ—Ä)
	_, err = c.AddFunc("0 2 * * *", func() {
		fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ...")
		// –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤–∏–¥–µ–æ
		if err := PublishVideos(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –ø–æ cron: %v", err)
		}
	})

	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è cron –∑–∞–¥–∞—á–∏: %v", err)
	}

	// –ó–∞–ø—É—Å–∫ cron –∑–∞–¥–∞—á
	c.Start()
}

// GenerateVideos –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –≤–∏–¥–µ–æ
func GenerateVideos() error {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dbConn, err := database.ConnectDB()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
		return err
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–¥–µ–æ
	videoService := service.NewVideoService(dbConn)

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–∏–¥–µ–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–≤–æ—Å—Ç–∏, –∏—Å—Ç–æ—Ä–∏–∏, —Ñ–∞–∫—Ç—ã)
	// –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ª–æ–≥–∏–∫–∏ –≤–∞—à–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	content, err := service.FetchContent()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞: %v", err)
		return err
	}

	// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
	for _, c := range content {
		videoPath, err := service.GenerateVideo(c)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ %v: %v", c, err)
			continue
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
		err = videoService.SaveGeneratedVideo(c, videoPath)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
		}
	}

	return nil
}

// PublishVideos –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, YouTube)
func PublishVideos() error {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dbConn, err := database.ConnectDB()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
		return err
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –≤–∏–¥–µ–æ
	videoService := service.NewVideoService(dbConn)

	// –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
	videos, err := videoService.GetUnpublishedVideos()
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–¥–µ–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: %v", err)
		return err
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ YouTube
	credentialsFile := "credentials.json"
	ytUploader, err := upload.NewYouTubeUploader(credentialsFile)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ YouTube uploader: %v", err)
		return err
	}

	// –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ YouTube
	for _, videoRecord := range videos {
		go func(videoRecord service.Video) {
			// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
			err := ytUploader.Upload(videoRecord.Path)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏–¥–µ–æ %s: %v", videoRecord.Path, err)
				return
			}

			// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			err = videoService.MarkVideoAsPublished(videoRecord.ID)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∏–¥–µ–æ –≤ –ë–î: %v", err)
			} else {
				log.Printf("–í–∏–¥–µ–æ %s —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ YouTube", videoRecord.Path)
			}
		}(videoRecord)
	}

	return nil
}
